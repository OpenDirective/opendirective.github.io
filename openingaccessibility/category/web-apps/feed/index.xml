<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>web apps &#8211; Opening Accessibility</title>
	<atom:link href="/openingaccessibility/category/web-apps/feed/" rel="self" type="application/rss+xml" />
	<link>/openingaccessibility</link>
	<description>Where open source joins accessibility</description>
	<lastBuildDate>Thu, 30 Mar 2017 10:26:12 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.9.8</generator>
	<item>
		<title>Is the web getting less webby and will serverless make it worse?</title>
		<link>/openingaccessibility/2016/09/is-the-web-getting-less-webby/</link>
		<comments>/openingaccessibility/2016/09/is-the-web-getting-less-webby/#respond</comments>
		<pubDate>Tue, 13 Sep 2016 11:43:58 +0000</pubDate>
		<dc:creator><![CDATA[Steve]]></dc:creator>
				<category><![CDATA[development]]></category>
		<category><![CDATA[HTML]]></category>
		<category><![CDATA[web a11y]]></category>
		<category><![CDATA[web apps]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[serverless]]></category>

		<guid isPermaLink="false">/openingaccessibility/?p=691</guid>
		<description><![CDATA[[Title inspired by a quote from Scott Hanselman on Serverless with Azure Functions &#8216;It&#8217;s as close to &#8220;cloudy&#8221; as The Cloud can get&#8217;] There&#8217;s some big changes happening in web land that are fuelled by rapid app framework developments and &#8230; <a href="/openingaccessibility/2016/09/is-the-web-getting-less-webby/">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p>[Title inspired by a quote from Scott Hanselman on <a href="http://www.hanselman.com/blog/WhatIsServerlessComputingExploringAzureFunctions.aspx">Serverless with Azure Functions</a> &#8216;It&#8217;s as close to &#8220;cloudy&#8221; as The Cloud can get&#8217;]</p>
<p>There&#8217;s some big changes happening in web land that are fuelled by rapid app framework developments and advances in cloud land. In particular the system architectural client-server split is shifting. We currently see these architectures (and variations):</p>
<ul>
<li>Classic 3 tier with web server passing presentation to the web browser as linked pages of HTML etc</li>
<li>Ajax-ified with some presentation elements being dynamically requested and updated by the browser or even generated client-side from received data.</li>
<li>Single Page Applications where presentation and navigation are completely generated in the browser which directly accesses various 1st and 3rd party RESTful APIs (SaaS).</li>
<li>The Opera Mini browser Opera Mini is very popular, especially in poorer countries. It is something of  an architectural oddity as it renders  on a display server and uses a thin-client style display protocol to the client app for data efficiency. This is effectively a final stage applied after the others in this list.</li>
<li>GraphQL is becoming popular for API queries as it lets the client dictate the payload and simplifies queries that would require multiple RESTful API round trips</li>
</ul>
<p>SPAs bring web apps into parity with Native Mobile Apps (and even some Desktop apps). The main difference now being the specific client side SDKs used to bind to the messaging protocols such as REST over HTTP.</p>
<p>On the server we see hosting being outsourced at progressively higher levels in the stack: the so called cloudy IaaS, PaaS, BaaS, FaaS and WaaS. In addition, microservices are being used to break up monolithic middle tiers. In the last year we have seen the rise of interest in so called Serverless (BaaS, FaaS and WaaS). This was initiated by the introduction of AWS Lambda, quickly followed by other providers including Azure Functions, Google Cloud Functions, OpenWhisk.</p>
<p><a href="/openingaccessibility/wp-content/uploads/2016/09/14867685775_c7044f0e2e_z.jpg"><img class="aligncenter wp-image-694 size-medium" src="/openingaccessibility/wp-content/uploads/2016/09/14867685775_c7044f0e2e_z-300x300.jpg" alt="cute pompom spider" width="300" height="300" srcset="/openingaccessibility/wp-content/uploads/2016/09/14867685775_c7044f0e2e_z-300x300.jpg 300w, /openingaccessibility/wp-content/uploads/2016/09/14867685775_c7044f0e2e_z-150x150.jpg 150w, /openingaccessibility/wp-content/uploads/2016/09/14867685775_c7044f0e2e_z.jpg 640w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>So, exiting times for developers! But are these architectural changes eroding core Webby principals, especially the very carefully developed inclusive design principles? What is the impact on web users?</p>
<p>After 25 years the classic web architecture has, with the help of Web standards, become available to almost everyone regardless of their device capabilities or their accessibility needs. Well, that&#8217;s in theory. The reality is completely dependent on developers being aware of best practices and prioritising them. HTML presentation elements are rendered by a wide range of browsers on varied devices including desktop with mouse and keyboard input, portable touch enabled devices with sizes from watches to tablets, and even hybrids such as 2 in ones. In addition to device variability, the Web standards and best practices support human and context variability through carefully baked in accessibility.</p>
<p>The move to micro (and nano FaaS) service architectures on the back end should have limited impact on this webbiness as they are internal details of the servers.  However, the protocols used between client and server are RESTful in the web world, or rather, RESTful communications are the lifeblood of the web. Newer developments like GraphQL start to move away from the web&#8217;s RESTful architecture by effectively using one part of HTTP as a transport (somewhat like SOAP). However, this largely a detail of interest to developers only as far as most web users are concerned.</p>
<p>On the face of it the use of client-side generated presentation with AJAX or a SPA should make no difference to webbiness either. True, dynamic creation of the UI is open to developers playing fast and loose with the standards. And accessibility is often being the first casualty. But this is just as possible when content is generated on the server.</p>
<p>A big difference between SPAs and HTML apps is that browser developers put enormous effort into ensuring bad HTML and CSS fail gracefully across supported devices. JavaScript, on the other hand, is NOT fail safe. An error means it crashes and the user probably gets a nasty surprise. Individual developers or client side JavaScript framework developers have to effectively duplicate the effort that browser vendors go to in order to get as rugged an UX. Thus the user experience may not be as  consistent or as accessible with a SPA.</p>
<p>Another issue is that developers want to use the latest and greatest browser features, often in order to give a great UX. For example Service Workers allow developers to provide a great offline experience. As the rate of change accelerates the chances of a user having an old browser that doesn&#8217;t support a shiny new feature increases. This is much more exaggerated with features accessed through JavaScript code compared to HTML as the speed and focus is currently there. Even the JavaScript language itself is rapidly evolving witch new features developers are keen to use. So, unless there&#8217;s careful design to work with a range of devices users may be left stranded.</p>
<p>An established technique to avoid these problems is Progressive Enhancement where a basic HTML experience is available and UX enhancements are layered on for users with browsers that support the latest CSS and JavaScript shininess. But, with SPAs there is no initial HTML rendering for less able browsers. Lately techniques such as serverside rendering and Universal (isomorphic) JavaScript restore this to a large extent. Interestingly, the drive for these techniques has been SEO (Google can&#8217;t spider a client side app)  and time to initial display content of, rather than PE concerns.</p>
<p>In summary, then, the architectural shifts we are seeing do provide new ways to break the carefully designed universal nature of the web and exclude users of some devices or with some accessibility needs. However by carefully following inclusive design thinking at the system level these can be minimised. The shape of web app architectures may be changing but we can ensure the core principles remain in our minds as we develop.</p>
<p>&nbsp;</p>
]]></content:encoded>
			<wfw:commentRss>/openingaccessibility/2016/09/is-the-web-getting-less-webby/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>AWS, Azure or Firebase for a SPA browser app? Nope, it&#8217;s Kinvey</title>
		<link>/openingaccessibility/2016/05/aws-azure-or-firebase-for-a-spa-browser-app/</link>
		<comments>/openingaccessibility/2016/05/aws-azure-or-firebase-for-a-spa-browser-app/#respond</comments>
		<pubDate>Fri, 27 May 2016 11:09:59 +0000</pubDate>
		<dc:creator><![CDATA[Steve]]></dc:creator>
				<category><![CDATA[serverless]]></category>
		<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[web]]></category>
		<category><![CDATA[web apps]]></category>

		<guid isPermaLink="false">/openingaccessibility/?p=671</guid>
		<description><![CDATA[[Update 2016/06/07:  I eventually found Azure to be lacking, though this did lead me to explore the excellent Auth0 for authentication. To be honest all three offerings are currently pretty much a bunch of &#8216;beta bits&#8217;, an apt phrase coined &#8230; <a href="/openingaccessibility/2016/05/aws-azure-or-firebase-for-a-spa-browser-app/">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p><strong>[Update 2016/06/07:  I eventually found Azure to be lacking, though this did lead me to explore the excellent <a href="https://auth0.com/">Auth0 </a>for authentication. To be honest all three offerings are currently pretty much a bunch of &#8216;beta bits&#8217;, an apt phrase coined by  by Michael Facemire and Jeffrey S. Hammond  in their &#8220;<a href="https://www.forrester.com/report/The+Forrester+Wave+Mobile+Infrastructure+Services+Q3+2015/-/E-RES119902">Forrester Wave<img src="https://s.w.org/images/core/emoji/11/72x72/2122.png" alt="™" class="wp-smiley" style="height: 1em; max-height: 1em;" />: Mobile Infrastructure Services, Q3 2015</a>&#8220;. I&#8217;m now exploring <a href="http://www.kinvey.com/">Kinvey</a>, one of the services mentioned in that report. Kinvey are certainly responsive and tick most of the boxes. I just hope they can deliver as I&#8217;m seriously behind schedule]</strong></p>
<p><strong>[Update 2016/06/08: After reviewing Kinvey and chatting with them I&#8217;ve decided it supplies just about all I need.  I&#8217;ve added them in to the comparison below for future reference. The one missing feature is a full CLI to enable scripted &#8220;from clean&#8221; setup and so CI / CD, but then I didn&#8217;t think of that when doing the original post. Another point I forgot was encryption of data in the client storage which they also have covered.]</strong></p>
<p>My current work is the <a href="https://github.com/OpenDirective/brian">Brian project</a> for people with cognitive disabilities. This open source development is funded by the Prosperity For All EU FP7 project (part of GPII initiative). The plan is for it to become a self financing a service based on Gregg Vanderheiden&#8217;s Easy One Communicator and features from MAAVIS.</p>
<p>After much thought about implementing Progressive Enhancement for a proper &#8216;web app&#8217;  verses usage scenarios requiring offline access I decided to start off making a so-called Single Page App (SPA) or &#8216;browser app&#8217; as I prefer to call them. SPAs require javascript for their functionality and tend to take advantage of all the latest features in the evergreen browsers. They treat the browser as a platform and are designed as part of a system architecture with custom client-server splits. This usually means consuming REST or other APIs directly in the client in order to access a broad range of services (often micro service based). These services may be part of the architecture being developed or from the many 3rd party offerings that add value through aggregation (or mashup).</p>
<p>Those services that are part of the new system being developed might be implemented as a HTTP server, either self hosted or in the cloud (so called IaaS). However, these days it is possible to go &#8216;serverless&#8217; by using so called Backend as a Service (BaaS) cloud offerings for &#8216;mobile&#8217; apps (MBaaS). These go a step beyond Platform as a Service (PaaS) which lets you concentrate on you server software at the top of your backend stack.  They also added features that are critical for mobile situations; eg offline data sync, user authentication. I decided to go this route as I really did not want to get involved in DevOps or SysOps or whatever you want to call service configuration, maintenance and security. Another advantage of BaaS is you can easily scale up the backend should your service &#8216;go large&#8217;; you just need to pay more.</p>
<p>The three main PaaS offerings that include some BaaS are Amazon Web Services (AWS), Microsoft Azure and Google Firebase. My initial thoughts were these big operators would have the best dev experience.</p>
<ul>
<li>Amazon AWS has been around the longest are easily the most popular IaaS. Not bad for a spin-off from Amazon&#8217;s own in house services. I discovered them via the excellent Serverless project early in my investigations.</li>
<li>Azure has steadily added features since the early IaaS only offering days and with the recent introduction of Apps and Functions looks like a pretty reasonable BaaS. It has a strong enterprise positioning.</li>
<li>Firebase was until very recently quite limited. They just rounded out the PaaS offering but adding authentication, storage and other features. Firebase is strong on metrics and pushing ads to users (now surprise there as is now Google / Alphabet). They often mention the most up-to-date requirements of SPA developers using modern JS practices.</li>
<li>Kinvey is about 4 years old and started supporting indie developers (like me) but recently pivoted to be more enterprise focussed. Their founder and CEO Sravish Sridhar claims to have <a href="http://readwrite.com/2014/02/02/kinvey-sravish-sridhar-builders/">invented the term BaaS </a>and prove the model works. They have a rounded provision and fully support HTML5 and javascript in the browser.</li>
</ul>
<p>As an aside, the Serverless project simplifies the configuration of your backend. This is  especially important in a team environment. Though serverless is tied to parts of AWS, Azure may come.</p>
<p>I tried AWS first. However after writing some client code and hitting many problems and confusions I finally decided enough was enough and I should look at others. The next big sticking point was username only sign in, most Brian users will not have email addresses. The following is a brief summary of my findings and thoughts based on my requirements.</p>
<p>Disclaimer: this review is a result of reading around the subject, with the exception of AWS I have not tried working code, yet. I also looked at the free tiers but with an eye on the expansion options</p>
<h2>Clear docs and examples for JavaScript mobile web app client</h2>
<ul>
<li>AWS: Quite a mess. iOS and Android are first class but javascript poorly linked and rather hard to find. To be fair, some components are beta. The main problem is lots bits and no clear complete examples</li>
<li>Azure: Yes but slightly confusing messaging and so many features that are not relevant to browser apps. &#8220;Web Apps&#8221; focusses on the back end services while a &#8220;Mobile App&#8221; add an offline-capable OData v3 feed for data and client SDKs including JS. Apache Cordova (hybrid apps) is often mentioned whenever JS is but apart from a few dependencies on Cordova plugins, browsers are equally well supported.  An <a href="https://shellmonger.com/category/mobile-development/">excellent series of posts</a> from the from the Apps project lead</li>
<li>Firebase: Excellent getting oriented and get started docs with good complete examples. Clean SDKs. All really easy to find.</li>
<li>Kinvey: Hard to fault really: case studies,  developer guides, references, samples and code all easy to find and digest. No bloat or hype, just good information. They even have some whitepapers and ebooks introducing the wider topics and comparisions with other providors.</li>
</ul>
<p>All the JS client SDKs are open source projects</p>
<h2>Support</h2>
<p>You get what you pay for with support so I just tried pre sales via twitter and other free channels</p>
<ul>
<li>AWS: I tried issues on the client SDK projects with limit success</li>
<li>Azure I got excellent direct help from the project lead.</li>
<li>Google: Use Stack Overflow &#8211; no response yet</li>
<li>Kinvey: Pretty much perfect. Initial Twitter contact from the CEO when I happened to mention Kinvey. Swiftly followed by voice discussion with JS lead. Forum is also active.</li>
</ul>
<h2>Static hosting for SPAs</h2>
<p>SPAs only need static hosting for the HTML, JS, CSS and other assets, While developing you don&#8217;t want caches to get in the way. In production you want CDNs to give global fast access. HTTPS is a must have as is URL rewriting as SPA use pushState to simulate URLs and we need to stop the server throwing 404s</p>
<ul>
<li>AWS: S3 doesn&#8217;t provide HTTPS, cloud front does but only suitable for deployment</li>
<li>Azure: All covered, Blob storage looks best or possibly web apps</li>
<li>Firebase: all covered</li>
<li>Kinvey: No. Perhaps the only missing feature</li>
</ul>
<p>There&#8217;s always GitPages, Surge and other services for cheap static hosting.</p>
<h2>Simple sign-in with Username and Password</h2>
<p>Brian users are elderly in residential environments and are most unlikely to have either email, SMS or accounts with other social services. Thus the commonplace and more secure authentication flows that require email or SMS cannot be used. Even a password may be too much for a person living with dementia.</p>
<ul>
<li>AWS: Explicit with Cognito User Pools, a new beta service.</li>
<li>Azure: fairly straight forward example given using Auth0 a separate service</li>
<li>Firebase: requires a custom Auth flow and identity server &#8211; perhaps works with Auth0</li>
<li>Kinvey: Yes. Plus options for enterprise and social federated</li>
</ul>
<h2>Offline data sync for use config</h2>
<p>This means no need to use REST APIs for data access. Just read/write locally and the system takes care of details as and when connectivity is available. Further, sync supports updates between devices. Should also optimise battery use and metered connection costs. I&#8217;m not particularly bothered if data is JSON, pairs or SQL.</p>
<ul>
<li>AWS: supposedly easy using Cognito Sync. I hit problems which basic set/get transaction which caused me to look at others.</li>
<li>Azure: not yet but in progress and a fork on GitHub project. Will initially be for Cordova apps only.</li>
<li>Firebase: yes. They mention all the important points.</li>
<li>Kinvey: Yes. Again covers the bases plus works with all browser storage options. Very clean flexible SDK based on RxJS observables and providing a Fluid style API for queries. This is a big bonus for Brian which uses RxJS CycleJS</li>
</ul>
<h2>Storage for media files and URL access</h2>
<p>Brian needs to display local images but the FileAPI URLs used to access local content are temporary. This almost certainly security related. Thus we unfortunately need to upload local files, store them an access with a private URL. Alternatively we create a Hybrid app to circumvent the sandboxing, but then we have to play the App Store dance and Ive no desire to do that.</p>
<ul>
<li>AWS: S3 and the Generate Web URL API for public and signed URLs</li>
<li>Azure: Blob storage with public and private URLs</li>
<li>Firebase: just released. Not clear how to get URL as operations seem to be upload / download only.</li>
<li>Kinvey: yes, delegates to Google cloud storage. Still not clear how to provide private URLs</li>
</ul>
<h2>Server side code execution, AKA business logic</h2>
<p>Rather than setting up a full server it should be possible to run &#8216;snippits&#8217; Obviously security, authentication and integration with other parts are all important.</p>
<ul>
<li>AWS: yes &#8211; Lambda</li>
<li>Azure: yes functions &#8211; still beta and not yet fully integrated with Apps</li>
<li>Firebase: no</li>
<li>Kinvey: Yes. Restricted node environment on free tier, full node on paid tiers.</li>
</ul>
<h2>CLI to make config easy to manage and reproduce</h2>
<p>All the systems have snazzy interactive web GUIs but as I discovered with SQL Server maintenance you *really* need to script you configuration to make it reproducible and to easily make bulk changes. This is especially important for CI /CD and allowing anyone to easily set up an open source project from scratch</p>
<ul>
<li>AWS: yes</li>
<li>Azure: yes and not just Windows either</li>
<li>Firebase yes.</li>
<li>Kinvey: Only for business logic on free. Requires manual management and deployment of some config. Offers image cloning on other tiers</li>
</ul>
<h2>Features for metering, crash support</h2>
<ul>
<li>AWS: yes</li>
<li>Azure: yes</li>
<li>Firebase: naturally strong given Googles business model</li>
<li>Kinvey: only with enterprise tier</li>
</ul>
<h2>Realtime messaging, data and push notifications</h2>
<p>I&#8217;m not bothered by this right now but it might be useful. I didn&#8217;t spend any time looking at this</p>
<ul>
<li>AWS: push notifications</li>
<li>Azure:  push notifications</li>
<li>Firebase:  make a big thing of push etc.</li>
<li>Kinvey: push notifications but not for JS clients (yet)</li>
</ul>
<h2>Collaboration opportunities</h2>
<p>I&#8217;m developing the client in CycleJS and RxJS (switching  soon to xstream) and the small but growing community includes those working on another SPA using Firebase. It would be great to share effort with the <a href="https://github.com/sdebaun/sparks-cyclejs">sparks project</a>, especially as they really understand the technology a lot more than myself. If I don&#8217;t use Firebase it might still be possible to share concepts with them and maybe make a similar driver for the community to use with another provider.</p>
<h2>Cost</h2>
<p>I left the most important &#8217;till last. Brian is an open source project and I&#8217;m collaborating with various EU projects who are performing trials. So as a micro SME I&#8217;m very cost sensitive. At least until I get the self financing service going. Thus a free period or credits are vital.</p>
<ul>
<li>AWS: I year free access to almost everything, Looks cheap after.</li>
<li>Azure: Somewhat confusing array of subscriptions that can run in parallel. Free month, F1 tier, MSDN and BizSpark. I&#8217;ve applied for the latter. Pricing a bit confusing and one page seemed out of date.</li>
<li>Google: most parts are free but some appear to always be chargeable.</li>
<li>Kinvey: Free developers tier good for all non enterprise .focused features, can have unlimited backends (called Apps).</li>
</ul>
<h2>Conclusion</h2>
<p>Part of the reason for this post was for me to collect my thoughts and make a decision. So despite being very late with getting a MVP out the door, I&#8217;m going to use Kinvey, rather than spend more time trying to get AWS working or fight with the gaps in Azure&#8217;s provision. I&#8217;ll take the extended learning curve and present lack of offline sync on the chin. It looks like Kinvey has all my requirements covered except a full CLI so with any luck I can just get on with my app now! I&#8217;ll post my experience</p>
]]></content:encoded>
			<wfw:commentRss>/openingaccessibility/2016/05/aws-azure-or-firebase-for-a-spa-browser-app/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>&#8220;I don&#8217;t care about the OS, just give me my web Apps&#8221;</title>
		<link>/openingaccessibility/2016/05/i-dont-care-about-the-os-just-give-me-my-web-apps/</link>
		<comments>/openingaccessibility/2016/05/i-dont-care-about-the-os-just-give-me-my-web-apps/#respond</comments>
		<pubDate>Tue, 10 May 2016 18:01:34 +0000</pubDate>
		<dc:creator><![CDATA[Steve]]></dc:creator>
				<category><![CDATA[a11y]]></category>
		<category><![CDATA[Apps]]></category>
		<category><![CDATA[web]]></category>
		<category><![CDATA[web apps]]></category>
		<category><![CDATA[web a11y]]></category>

		<guid isPermaLink="false">/openingaccessibility/?p=668</guid>
		<description><![CDATA[So I tweeted in jest to Bruce Lawson today in a conversation about Progressive Web Apps in the aftermath of the excellent WebProgressions one-day conference. And then I realised, I actually meant it! My point is that as a user &#8230; <a href="/openingaccessibility/2016/05/i-dont-care-about-the-os-just-give-me-my-web-apps/">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p>So I tweeted in jest to Bruce Lawson today in a conversation about Progressive Web Apps in the aftermath of the excellent <a href="https://webprogressions.org/">WebProgressions </a>one-day conference.</p>
<p>And then I realised, I actually meant it!</p>
<p>My point is that as a user of tech I want to get at the content or functionality I find useful or interesting when I want to. I want to do so whatever device I have in front of me of me or on me. I&#8217;m not interested in arbitrary platform distinctions or fan bouy love affairs. To be honest I find the main desktop OSs are ‘the same but different’. Ditto mobile OSs. And that’s OK. I&#8217;d even be happy if devices became commodity infrastructure. But the market isn&#8217;t quite like that.</p>
<p>If I quickly want some info I&#8217;ll use the web. If I want to do something repeatedly and it&#8217;s convenient for me to let the service save info about me for *my* benefit, I&#8217;ll use an app. Furthermore,  as I want probably to get access to the same stuff on different devices that really means I want a web app. That&#8217;s the closest we&#8217;ve so far got to the &#8220;write once, run anywhere dream.</p>
<p>Variety is good for choice and drives quality so I&#8217;m happy that there are competing browsers and OSs. Just as long as they seamlessly support the features I want. And these days that probably means they use basic features covered by a W3C standard.</p>
<p>Does that mean I want my experience of the web sites and apps I access to be identical whatever? Absolutely not. I want variation that suites</p>
<ul>
<li>My interaction modes and environment. For example, desktop with keyboard and large screen or mobile with touch (but note these personal and technical modes are all blurring)</li>
<li>Personalised access according to my preferences and accessibility requirements and environmental constraints (eg driving)</li>
</ul>
<p>Actually, those 2 are really just different facets of the same thing. Personalised Accessible User Experience or AUX</p>
<p>I don&#8217;t want experience based on the suppliers development priorities or convenience. Nor on some marketing wish to push stuff at me for business benefits (especially Ads).  But, it turns out platform <strong>does</strong> matter as the accessible experiences are not equal.</p>
<p>I want a user-centred AUX whatever the device. No more and no less.</p>
<p>Having started taking Microsoft seriously again I do think they get much of this. Even if they are going to start charging for Windows 10 again. It looks like they are focussing on the cloud and services rather than just the Windows OS. With Edge, they are now engaging with web users and development community in very impressive and meaningful ways. They have made accessibility important at a high level. Continuum and devices like Surface Pro accept our desire to change our interaction modes during the day: and even encourage it.</p>
<p>Just don&#8217;t expect them to open source Windows just yet!</p>
]]></content:encoded>
			<wfw:commentRss>/openingaccessibility/2016/05/i-dont-care-about-the-os-just-give-me-my-web-apps/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
