<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>web &#8211; Opening Accessibility</title>
	<atom:link href="/openingaccessibility/category/web/feed/" rel="self" type="application/rss+xml" />
	<link>/openingaccessibility</link>
	<description>Where open source joins accessibility</description>
	<lastBuildDate>Thu, 30 Mar 2017 10:26:12 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.9.8</generator>
	<item>
		<title>Using reactive streams on serverless with cyclejs, xstream and Azure Functions</title>
		<link>/openingaccessibility/2016/10/exploring-reactive-streams-with-serverless-xstream-cyclejs-and-azure-functions/</link>
		<comments>/openingaccessibility/2016/10/exploring-reactive-streams-with-serverless-xstream-cyclejs-and-azure-functions/#respond</comments>
		<pubDate>Sat, 22 Oct 2016 22:00:26 +0000</pubDate>
		<dc:creator><![CDATA[Steve]]></dc:creator>
				<category><![CDATA[development]]></category>
		<category><![CDATA[web]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[Reactive Programming]]></category>
		<category><![CDATA[serverless]]></category>

		<guid isPermaLink="false">/openingaccessibility/?p=699</guid>
		<description><![CDATA[[ Update 2016-10-23 the code is now in the cyclejs community repo] During development of my latest SaaS product, Brian, I&#8217;ve settled on a couple of key architectural decisions. For the Frontend I&#8217;m using Reactive programming (RP) with streams and &#8230; <a href="/openingaccessibility/2016/10/exploring-reactive-streams-with-serverless-xstream-cyclejs-and-azure-functions/">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p>[ Update 2016-10-23 the code is now in the <a href="https://github.com/cyclejs-community/cycle-serverless">cyclejs community repo</a>]</p>
<p>During development of my latest SaaS product, Brian, I&#8217;ve settled on a couple of key architectural decisions. For the Frontend I&#8217;m using Reactive programming (RP) with streams and for the backend I&#8217;ve decided on the &#8216;Serverless&#8217; (FaaS) approach. Specifically, I&#8217;m using  Andre Stalz&#8217;s <a href="http://staltz.com/xstream">xstream</a> with the incredibly light &#8216;framework&#8217; <a href="https://cycle.js.org/">cyclejs</a> (but cyclejs supports other streaming libs, including the excellent <a href="https://rxjs.codeplex.com/">RxJS</a>) . Microsoft&#8217;s <a href="https://azure.microsoft.com/en-us/services/functions/">Azure Functions</a> give a FaaS solution backed-up by many other options including BaaS &amp; PaaS should they be required. This post looks at using them together on the backend.</p>
<div style="width: 285px" class="wp-caption alignleft"><img src="https://cycle.js.org/img/cyclejs_logo.svg" alt="Cyclejs" width="275" height="275" /><p class="wp-caption-text">Cyclejs</p></div>
<div style="width: 287px" class="wp-caption alignright"><img src="http://stiller.co.il/blog/wp-content/uploads/2016/04/Azure-Functions-Logo.png" alt="Functions logo" width="277" height="278" /><p class="wp-caption-text">Functions logo</p></div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>I&#8217;m happy that the trade-offs and benefits with these approaches should meet my requirements. Namely, achieving  rapid development by focussing energy higher &#8216;up the stack&#8217;. I want to concentrate on innovation of user features and &#8216;business logic&#8217; and not boilerplate or DevOps. From my early explorations I think Serverless and cyclejs manage to hit sweet spots of benefit and learning curve. However, they are most definitely not silver bullets, having wrinkles all their own that take time and effort to learn and overcome.</p>
<p>When I initially created Functions code using a traditional imperative style I rapidly found I missed the RP style I&#8217;d become familiar with when using CycleJS with RxJS. It&#8217;s a style that gets under your skin once you make the mental shift. Perhaps my background in real-time async communications predisposes me to seeing the benefits of asynchronous handling of streams. But whatever, I thought it would be fun to try it in the serverless context. At least both front and back ends would then be similar in architecture.</p>
<p>You may wonder why on earth I would consider using RP in a FaaS context. After all, the  FaaS architecture is all about small functions which are run once triggered and then quickly end. Thus, it would seem there isn&#8217;t much scope for streams when there is single trigger input event plus perhaps another data source or two.  One often touted advantage of RP is that it&#8217;s pure functions are easier to test, but that&#8217;s also a recommend practice with FaaS so that&#8217;s not an obvious advantage for having RP as well as FaaS.</p>
<p>One reason for wanting to use RP is that any non trivial functions are likely to have other asynchronous event sources, including SaaS requests and database updates over REST. Even so, there are other less tangible benefits of RP with cyclejs that I personally I found over imperative code style:</p>
<ul>
<li>Loose coupling through reactive observers</li>
<li>Declarative style married to functional programming techniques</li>
<li>Separation of input, output side effects from the &#8220;pure&#8221; business logic</li>
</ul>
<p>Together these engender a clean high-level way to describe program logic. Bugs also appear to be reduced and it also enables testing without excessive mocking due to the absence of side effects in the main code. Sometimes however, debugging can be more involved due to current tooling supporting imperative and not reactive. However, tooling is starting to appear as more turn to RP.</p>
<p>So what are the differences found when running xstream and cyclejs on Azure Functions environment compared to the usual browser (and sometimes nodejs) contexts?Surprisingly few it turns out. Fortunately, Functions builds on Azure Web Apps which supports nodejs and express. Better, it&#8217;s node 6.x that is provided which includes all those key ES6 features that really help clean up RP code. Another plus is that the cycle HTTP driver works fine on node.</p>
<p>In this implementation I&#8217;ve taken the approach of providing a cycle runtime in each Azure Function. Effectively, each Function is a component in the cycle sense of the word, though connections between components will have to be via HTTP, queues or other out of process couplings. This approach seems to be the a good choice as you can use Cyclejs or not for any individual function, depending on the complexity and preferences. As the Functions run time is open source there is scope to explore different and more deeply embedded approaches.</p>
<p>So without further a-do here&#8217;s the Functions driver code.</p><pre class="crayon-plain-tag">const xs = require('xstream').default

module.exports = function makeFunctionsDriver(context, dispwrap, inArgs) {

    function driver(s$) {
        s$.addListener({ next: (i) =&gt; { setTimeout(() =&gt; {  // next tick to allow other listenerns to be iterated
                                            context.res = i 
                                            if (dispwrap &amp;&amp;
                                                typeof dispwrap.disposer === 'function') {
                                                dispwrap.disposer()
                                            }
                                            context.done()
                                            }, 1)
                         },   
                         error: () =&gt; {},
                         complete: () =&gt; {}
        })

        return xs.createWithMemory({
            start: listener =&gt; {
                setTimeout(() =&gt; {listener.next({context, inArgs})}, 1)
            },
            stop: () =&gt; {},
        })

  
    }

    const logger = a =&gt; context.log(a)
    return {driver, logger}
}</pre><p>As with all drivers, the Function driver is there to handle useful side effects such as input and output. In this case it converts the Function inputs (&#8220;context&#8221; and an array of input bindings) into a source stream. It also sinks a stream containing the function&#8217;s output. This also acts as a signal that the function should complete (the driver calls context.done).  The sink also disposes of the streams created by run() for cleanup (this adds a little implementation complexity due to a forward declaration and JS&#8217;s lack of true pass-by-reference).</p>
<p>It turns out that using console.log is not useful in Functions, rather the alternative context.log is used. Thus, we also provide a Log driver that uses this channel. This is also used with xstream&#8217;s debug operator, which fortunately accepts a function argument as well as a value. I also decided the FunctionsDriver factory would return the log function itself as well as the driver. In this way nearly all the FaaS platform dependencies are encapsulated in the driver. This makes it possible to write a version for AWS Lamda or other serverless frameworks.</p>
<p>Here&#8217;s an example usage for a HTTP Function. It starts a 1 second ticker and on the 3rd tick makes a REST API request. It then returns the first item from the response in function output. The code demonstrates the use of all the driver features and the clarity of RP with cyclejs.</p><pre class="crayon-plain-tag">const xs = require('xstream').default
const run = require('@cycle/xstream-run').run
const makeHTTPDriver = require('@cycle/http').makeHTTPDriver
const makeFunctionsDriver = require('./functionsDriver.js')

module.exports = function (context, ...inArgs) {
    const dispwrap = {}             // because JS doesn't do pass-by-ref
    const {driver: functionsDriver, logger} = makeFunctionsDriver(context, dispwrap, inArgs)

    const drivers = {
        FaaS: functionsDriver,
        HTTP: makeHTTPDriver(),
        log: msg$ =&gt; { msg$.addListener({next: msg =&gt; logger(`${msg}`) }) }
    }

    dispwrap.disposer = run(main, drivers)
   
    function main(sources) {
        const input$ = sources.FaaS
            .map((s) =&gt; `context.req.originalUrl: ${s.context.req.originalUrl} /
                         inArgs[0]: ${JSON.stringify(s.inArgs[0])}`)
            
        const ticks$ = xs.periodic(1000)
            .map(t =&gt; (t + 1) * 100)
        
        const log$ = xs.merge(input$, ticks$)

        const trigger$ = ticks$
            .drop(2)
            .debug((i) =&gt; logger(`trigger tick: ${i}`))
 
        const request$ = trigger$
            .map(() =&gt; ({
                            url: 'http://jsonplaceholder.typicode.com/users/1',
                            method: 'GET'
                        }))

        const response$ = sources.HTTP
            .select()
            .flatten()
        const user1Data$ = response$.map(response =&gt; response.body)
        const exit$ = user1Data$
            .map(u =&gt; ({ status: 200, body: u}))

        return {
            FaaS: exit$,
            log: log$,
            HTTP: request$
        }
    }
}</pre><p>One issue that needs to be ironed out is sometimes exceptions such as syntax errors get lost and not presented in the Functions Logs. That&#8217;s probably xstream not re throwing captured exceptions. For now the fix is to put try&#8230;catch(log) blocks around parts of the code to get visibility.</p>
<p>What do you think. Does this approach work for you?</p>
]]></content:encoded>
			<wfw:commentRss>/openingaccessibility/2016/10/exploring-reactive-streams-with-serverless-xstream-cyclejs-and-azure-functions/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>AWS, Azure or Firebase for a SPA browser app? Nope, it&#8217;s Kinvey</title>
		<link>/openingaccessibility/2016/05/aws-azure-or-firebase-for-a-spa-browser-app/</link>
		<comments>/openingaccessibility/2016/05/aws-azure-or-firebase-for-a-spa-browser-app/#respond</comments>
		<pubDate>Fri, 27 May 2016 11:09:59 +0000</pubDate>
		<dc:creator><![CDATA[Steve]]></dc:creator>
				<category><![CDATA[serverless]]></category>
		<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[web]]></category>
		<category><![CDATA[web apps]]></category>

		<guid isPermaLink="false">/openingaccessibility/?p=671</guid>
		<description><![CDATA[[Update 2016/06/07:  I eventually found Azure to be lacking, though this did lead me to explore the excellent Auth0 for authentication. To be honest all three offerings are currently pretty much a bunch of &#8216;beta bits&#8217;, an apt phrase coined &#8230; <a href="/openingaccessibility/2016/05/aws-azure-or-firebase-for-a-spa-browser-app/">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p><strong>[Update 2016/06/07:  I eventually found Azure to be lacking, though this did lead me to explore the excellent <a href="https://auth0.com/">Auth0 </a>for authentication. To be honest all three offerings are currently pretty much a bunch of &#8216;beta bits&#8217;, an apt phrase coined by  by Michael Facemire and Jeffrey S. Hammond  in their &#8220;<a href="https://www.forrester.com/report/The+Forrester+Wave+Mobile+Infrastructure+Services+Q3+2015/-/E-RES119902">Forrester Wave<img src="https://s.w.org/images/core/emoji/11/72x72/2122.png" alt="™" class="wp-smiley" style="height: 1em; max-height: 1em;" />: Mobile Infrastructure Services, Q3 2015</a>&#8220;. I&#8217;m now exploring <a href="http://www.kinvey.com/">Kinvey</a>, one of the services mentioned in that report. Kinvey are certainly responsive and tick most of the boxes. I just hope they can deliver as I&#8217;m seriously behind schedule]</strong></p>
<p><strong>[Update 2016/06/08: After reviewing Kinvey and chatting with them I&#8217;ve decided it supplies just about all I need.  I&#8217;ve added them in to the comparison below for future reference. The one missing feature is a full CLI to enable scripted &#8220;from clean&#8221; setup and so CI / CD, but then I didn&#8217;t think of that when doing the original post. Another point I forgot was encryption of data in the client storage which they also have covered.]</strong></p>
<p>My current work is the <a href="https://github.com/OpenDirective/brian">Brian project</a> for people with cognitive disabilities. This open source development is funded by the Prosperity For All EU FP7 project (part of GPII initiative). The plan is for it to become a self financing a service based on Gregg Vanderheiden&#8217;s Easy One Communicator and features from MAAVIS.</p>
<p>After much thought about implementing Progressive Enhancement for a proper &#8216;web app&#8217;  verses usage scenarios requiring offline access I decided to start off making a so-called Single Page App (SPA) or &#8216;browser app&#8217; as I prefer to call them. SPAs require javascript for their functionality and tend to take advantage of all the latest features in the evergreen browsers. They treat the browser as a platform and are designed as part of a system architecture with custom client-server splits. This usually means consuming REST or other APIs directly in the client in order to access a broad range of services (often micro service based). These services may be part of the architecture being developed or from the many 3rd party offerings that add value through aggregation (or mashup).</p>
<p>Those services that are part of the new system being developed might be implemented as a HTTP server, either self hosted or in the cloud (so called IaaS). However, these days it is possible to go &#8216;serverless&#8217; by using so called Backend as a Service (BaaS) cloud offerings for &#8216;mobile&#8217; apps (MBaaS). These go a step beyond Platform as a Service (PaaS) which lets you concentrate on you server software at the top of your backend stack.  They also added features that are critical for mobile situations; eg offline data sync, user authentication. I decided to go this route as I really did not want to get involved in DevOps or SysOps or whatever you want to call service configuration, maintenance and security. Another advantage of BaaS is you can easily scale up the backend should your service &#8216;go large&#8217;; you just need to pay more.</p>
<p>The three main PaaS offerings that include some BaaS are Amazon Web Services (AWS), Microsoft Azure and Google Firebase. My initial thoughts were these big operators would have the best dev experience.</p>
<ul>
<li>Amazon AWS has been around the longest are easily the most popular IaaS. Not bad for a spin-off from Amazon&#8217;s own in house services. I discovered them via the excellent Serverless project early in my investigations.</li>
<li>Azure has steadily added features since the early IaaS only offering days and with the recent introduction of Apps and Functions looks like a pretty reasonable BaaS. It has a strong enterprise positioning.</li>
<li>Firebase was until very recently quite limited. They just rounded out the PaaS offering but adding authentication, storage and other features. Firebase is strong on metrics and pushing ads to users (now surprise there as is now Google / Alphabet). They often mention the most up-to-date requirements of SPA developers using modern JS practices.</li>
<li>Kinvey is about 4 years old and started supporting indie developers (like me) but recently pivoted to be more enterprise focussed. Their founder and CEO Sravish Sridhar claims to have <a href="http://readwrite.com/2014/02/02/kinvey-sravish-sridhar-builders/">invented the term BaaS </a>and prove the model works. They have a rounded provision and fully support HTML5 and javascript in the browser.</li>
</ul>
<p>As an aside, the Serverless project simplifies the configuration of your backend. This is  especially important in a team environment. Though serverless is tied to parts of AWS, Azure may come.</p>
<p>I tried AWS first. However after writing some client code and hitting many problems and confusions I finally decided enough was enough and I should look at others. The next big sticking point was username only sign in, most Brian users will not have email addresses. The following is a brief summary of my findings and thoughts based on my requirements.</p>
<p>Disclaimer: this review is a result of reading around the subject, with the exception of AWS I have not tried working code, yet. I also looked at the free tiers but with an eye on the expansion options</p>
<h2>Clear docs and examples for JavaScript mobile web app client</h2>
<ul>
<li>AWS: Quite a mess. iOS and Android are first class but javascript poorly linked and rather hard to find. To be fair, some components are beta. The main problem is lots bits and no clear complete examples</li>
<li>Azure: Yes but slightly confusing messaging and so many features that are not relevant to browser apps. &#8220;Web Apps&#8221; focusses on the back end services while a &#8220;Mobile App&#8221; add an offline-capable OData v3 feed for data and client SDKs including JS. Apache Cordova (hybrid apps) is often mentioned whenever JS is but apart from a few dependencies on Cordova plugins, browsers are equally well supported.  An <a href="https://shellmonger.com/category/mobile-development/">excellent series of posts</a> from the from the Apps project lead</li>
<li>Firebase: Excellent getting oriented and get started docs with good complete examples. Clean SDKs. All really easy to find.</li>
<li>Kinvey: Hard to fault really: case studies,  developer guides, references, samples and code all easy to find and digest. No bloat or hype, just good information. They even have some whitepapers and ebooks introducing the wider topics and comparisions with other providors.</li>
</ul>
<p>All the JS client SDKs are open source projects</p>
<h2>Support</h2>
<p>You get what you pay for with support so I just tried pre sales via twitter and other free channels</p>
<ul>
<li>AWS: I tried issues on the client SDK projects with limit success</li>
<li>Azure I got excellent direct help from the project lead.</li>
<li>Google: Use Stack Overflow &#8211; no response yet</li>
<li>Kinvey: Pretty much perfect. Initial Twitter contact from the CEO when I happened to mention Kinvey. Swiftly followed by voice discussion with JS lead. Forum is also active.</li>
</ul>
<h2>Static hosting for SPAs</h2>
<p>SPAs only need static hosting for the HTML, JS, CSS and other assets, While developing you don&#8217;t want caches to get in the way. In production you want CDNs to give global fast access. HTTPS is a must have as is URL rewriting as SPA use pushState to simulate URLs and we need to stop the server throwing 404s</p>
<ul>
<li>AWS: S3 doesn&#8217;t provide HTTPS, cloud front does but only suitable for deployment</li>
<li>Azure: All covered, Blob storage looks best or possibly web apps</li>
<li>Firebase: all covered</li>
<li>Kinvey: No. Perhaps the only missing feature</li>
</ul>
<p>There&#8217;s always GitPages, Surge and other services for cheap static hosting.</p>
<h2>Simple sign-in with Username and Password</h2>
<p>Brian users are elderly in residential environments and are most unlikely to have either email, SMS or accounts with other social services. Thus the commonplace and more secure authentication flows that require email or SMS cannot be used. Even a password may be too much for a person living with dementia.</p>
<ul>
<li>AWS: Explicit with Cognito User Pools, a new beta service.</li>
<li>Azure: fairly straight forward example given using Auth0 a separate service</li>
<li>Firebase: requires a custom Auth flow and identity server &#8211; perhaps works with Auth0</li>
<li>Kinvey: Yes. Plus options for enterprise and social federated</li>
</ul>
<h2>Offline data sync for use config</h2>
<p>This means no need to use REST APIs for data access. Just read/write locally and the system takes care of details as and when connectivity is available. Further, sync supports updates between devices. Should also optimise battery use and metered connection costs. I&#8217;m not particularly bothered if data is JSON, pairs or SQL.</p>
<ul>
<li>AWS: supposedly easy using Cognito Sync. I hit problems which basic set/get transaction which caused me to look at others.</li>
<li>Azure: not yet but in progress and a fork on GitHub project. Will initially be for Cordova apps only.</li>
<li>Firebase: yes. They mention all the important points.</li>
<li>Kinvey: Yes. Again covers the bases plus works with all browser storage options. Very clean flexible SDK based on RxJS observables and providing a Fluid style API for queries. This is a big bonus for Brian which uses RxJS CycleJS</li>
</ul>
<h2>Storage for media files and URL access</h2>
<p>Brian needs to display local images but the FileAPI URLs used to access local content are temporary. This almost certainly security related. Thus we unfortunately need to upload local files, store them an access with a private URL. Alternatively we create a Hybrid app to circumvent the sandboxing, but then we have to play the App Store dance and Ive no desire to do that.</p>
<ul>
<li>AWS: S3 and the Generate Web URL API for public and signed URLs</li>
<li>Azure: Blob storage with public and private URLs</li>
<li>Firebase: just released. Not clear how to get URL as operations seem to be upload / download only.</li>
<li>Kinvey: yes, delegates to Google cloud storage. Still not clear how to provide private URLs</li>
</ul>
<h2>Server side code execution, AKA business logic</h2>
<p>Rather than setting up a full server it should be possible to run &#8216;snippits&#8217; Obviously security, authentication and integration with other parts are all important.</p>
<ul>
<li>AWS: yes &#8211; Lambda</li>
<li>Azure: yes functions &#8211; still beta and not yet fully integrated with Apps</li>
<li>Firebase: no</li>
<li>Kinvey: Yes. Restricted node environment on free tier, full node on paid tiers.</li>
</ul>
<h2>CLI to make config easy to manage and reproduce</h2>
<p>All the systems have snazzy interactive web GUIs but as I discovered with SQL Server maintenance you *really* need to script you configuration to make it reproducible and to easily make bulk changes. This is especially important for CI /CD and allowing anyone to easily set up an open source project from scratch</p>
<ul>
<li>AWS: yes</li>
<li>Azure: yes and not just Windows either</li>
<li>Firebase yes.</li>
<li>Kinvey: Only for business logic on free. Requires manual management and deployment of some config. Offers image cloning on other tiers</li>
</ul>
<h2>Features for metering, crash support</h2>
<ul>
<li>AWS: yes</li>
<li>Azure: yes</li>
<li>Firebase: naturally strong given Googles business model</li>
<li>Kinvey: only with enterprise tier</li>
</ul>
<h2>Realtime messaging, data and push notifications</h2>
<p>I&#8217;m not bothered by this right now but it might be useful. I didn&#8217;t spend any time looking at this</p>
<ul>
<li>AWS: push notifications</li>
<li>Azure:  push notifications</li>
<li>Firebase:  make a big thing of push etc.</li>
<li>Kinvey: push notifications but not for JS clients (yet)</li>
</ul>
<h2>Collaboration opportunities</h2>
<p>I&#8217;m developing the client in CycleJS and RxJS (switching  soon to xstream) and the small but growing community includes those working on another SPA using Firebase. It would be great to share effort with the <a href="https://github.com/sdebaun/sparks-cyclejs">sparks project</a>, especially as they really understand the technology a lot more than myself. If I don&#8217;t use Firebase it might still be possible to share concepts with them and maybe make a similar driver for the community to use with another provider.</p>
<h2>Cost</h2>
<p>I left the most important &#8217;till last. Brian is an open source project and I&#8217;m collaborating with various EU projects who are performing trials. So as a micro SME I&#8217;m very cost sensitive. At least until I get the self financing service going. Thus a free period or credits are vital.</p>
<ul>
<li>AWS: I year free access to almost everything, Looks cheap after.</li>
<li>Azure: Somewhat confusing array of subscriptions that can run in parallel. Free month, F1 tier, MSDN and BizSpark. I&#8217;ve applied for the latter. Pricing a bit confusing and one page seemed out of date.</li>
<li>Google: most parts are free but some appear to always be chargeable.</li>
<li>Kinvey: Free developers tier good for all non enterprise .focused features, can have unlimited backends (called Apps).</li>
</ul>
<h2>Conclusion</h2>
<p>Part of the reason for this post was for me to collect my thoughts and make a decision. So despite being very late with getting a MVP out the door, I&#8217;m going to use Kinvey, rather than spend more time trying to get AWS working or fight with the gaps in Azure&#8217;s provision. I&#8217;ll take the extended learning curve and present lack of offline sync on the chin. It looks like Kinvey has all my requirements covered except a full CLI so with any luck I can just get on with my app now! I&#8217;ll post my experience</p>
]]></content:encoded>
			<wfw:commentRss>/openingaccessibility/2016/05/aws-azure-or-firebase-for-a-spa-browser-app/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>&#8220;I don&#8217;t care about the OS, just give me my web Apps&#8221;</title>
		<link>/openingaccessibility/2016/05/i-dont-care-about-the-os-just-give-me-my-web-apps/</link>
		<comments>/openingaccessibility/2016/05/i-dont-care-about-the-os-just-give-me-my-web-apps/#respond</comments>
		<pubDate>Tue, 10 May 2016 18:01:34 +0000</pubDate>
		<dc:creator><![CDATA[Steve]]></dc:creator>
				<category><![CDATA[a11y]]></category>
		<category><![CDATA[Apps]]></category>
		<category><![CDATA[web]]></category>
		<category><![CDATA[web apps]]></category>
		<category><![CDATA[web a11y]]></category>

		<guid isPermaLink="false">/openingaccessibility/?p=668</guid>
		<description><![CDATA[So I tweeted in jest to Bruce Lawson today in a conversation about Progressive Web Apps in the aftermath of the excellent WebProgressions one-day conference. And then I realised, I actually meant it! My point is that as a user &#8230; <a href="/openingaccessibility/2016/05/i-dont-care-about-the-os-just-give-me-my-web-apps/">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p>So I tweeted in jest to Bruce Lawson today in a conversation about Progressive Web Apps in the aftermath of the excellent <a href="https://webprogressions.org/">WebProgressions </a>one-day conference.</p>
<p>And then I realised, I actually meant it!</p>
<p>My point is that as a user of tech I want to get at the content or functionality I find useful or interesting when I want to. I want to do so whatever device I have in front of me of me or on me. I&#8217;m not interested in arbitrary platform distinctions or fan bouy love affairs. To be honest I find the main desktop OSs are ‘the same but different’. Ditto mobile OSs. And that’s OK. I&#8217;d even be happy if devices became commodity infrastructure. But the market isn&#8217;t quite like that.</p>
<p>If I quickly want some info I&#8217;ll use the web. If I want to do something repeatedly and it&#8217;s convenient for me to let the service save info about me for *my* benefit, I&#8217;ll use an app. Furthermore,  as I want probably to get access to the same stuff on different devices that really means I want a web app. That&#8217;s the closest we&#8217;ve so far got to the &#8220;write once, run anywhere dream.</p>
<p>Variety is good for choice and drives quality so I&#8217;m happy that there are competing browsers and OSs. Just as long as they seamlessly support the features I want. And these days that probably means they use basic features covered by a W3C standard.</p>
<p>Does that mean I want my experience of the web sites and apps I access to be identical whatever? Absolutely not. I want variation that suites</p>
<ul>
<li>My interaction modes and environment. For example, desktop with keyboard and large screen or mobile with touch (but note these personal and technical modes are all blurring)</li>
<li>Personalised access according to my preferences and accessibility requirements and environmental constraints (eg driving)</li>
</ul>
<p>Actually, those 2 are really just different facets of the same thing. Personalised Accessible User Experience or AUX</p>
<p>I don&#8217;t want experience based on the suppliers development priorities or convenience. Nor on some marketing wish to push stuff at me for business benefits (especially Ads).  But, it turns out platform <strong>does</strong> matter as the accessible experiences are not equal.</p>
<p>I want a user-centred AUX whatever the device. No more and no less.</p>
<p>Having started taking Microsoft seriously again I do think they get much of this. Even if they are going to start charging for Windows 10 again. It looks like they are focussing on the cloud and services rather than just the Windows OS. With Edge, they are now engaging with web users and development community in very impressive and meaningful ways. They have made accessibility important at a high level. Continuum and devices like Surface Pro accept our desire to change our interaction modes during the day: and even encourage it.</p>
<p>Just don&#8217;t expect them to open source Windows just yet!</p>
]]></content:encoded>
			<wfw:commentRss>/openingaccessibility/2016/05/i-dont-care-about-the-os-just-give-me-my-web-apps/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>More on portable npm scripts</title>
		<link>/openingaccessibility/2016/03/more-on-portable-npm-scripts/</link>
		<comments>/openingaccessibility/2016/03/more-on-portable-npm-scripts/#comments</comments>
		<pubDate>Thu, 17 Mar 2016 15:46:55 +0000</pubDate>
		<dc:creator><![CDATA[Steve]]></dc:creator>
				<category><![CDATA[development]]></category>
		<category><![CDATA[web]]></category>
		<category><![CDATA[Windows]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[nodejs]]></category>
		<category><![CDATA[npm]]></category>
		<category><![CDATA[Virtualisation]]></category>

		<guid isPermaLink="false">/openingaccessibility/?p=640</guid>
		<description><![CDATA[Following on from my earlier post on the topic of writing portable npm scripts, here&#8217;s a few more useful tips. [UPDATE 2016/03/31: Bash for Windows was announced at Microsoft Build 2016. This exciting feature will allow running of Linux npm &#8230; <a href="/openingaccessibility/2016/03/more-on-portable-npm-scripts/">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p>Following on from my earlier post on the topic of <a href="/openingaccessibility/2015/12/writing-portable-npm-build-scripts/">writing portable npm scripts</a>, here&#8217;s a few more useful tips.</p>
<p>[UPDATE 2016/03/31: Bash for Windows was announced at Microsoft Build 2016. This exciting feature will allow running of Linux npm script builds with ease. See <a href="http://www.hanselman.com/blog/DevelopersCanRunBashShellAndUsermodeUbuntuLinuxBinariesOnWindows10.aspx">Scott Hanselman&#8217;s blog post</a>]</p>
<p>[UPDATE: 2016/03/29:  The recently released <a href="https://blog.docker.com/2016/03/docker-for-mac-windows-beta/">Docker for Windows Beta</a> might be a good alternative to using a VM. It user Hyper-V.]</p>
<p>[UPDATE: 2016/03/29:  This is a comprehensive article on <a href="http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/">using npm for build</a>]</p>
<h1>Copying files</h1>
<p>Use the <a href="https://www.npmjs.com/package/ncp">ncp </a>module to copy files. This goes nicely with mkdirp and rimraf  mentioned before.</p>
<h1>Setting environment variables</h1>
<p>It&#8217;s common to have scripts with a command line of the form</p><pre class="crayon-plain-tag">NODE_ENV=production webpack --config client/webpack.config.js</pre><p>This sets the environment variable NODE_ENV for the duration the command runs. In this case it is use to perform a production build with webpack.</p>
<p>Such syntax works fine in bash etc on Linux / OS X but fails on windows where npm scripts always use CMD. One solution is to use the <a href="https://www.npmjs.com/package/cross-env">cross-env</a> npm module which uses a regx to find environment settings (and so is probably not fool-proof). Once installed you just prefix your command like so</p><pre class="crayon-plain-tag">cross-env NODE_ENV=production webpack --config client/webpack.config.js</pre><p></p>
<h1>Running an extra bash process</h1>
<p>I use the <a href="https://git-for-windows.github.io/">Git for Windows</a> bash shell for all my development CLI needs on Windows (It is also installed as part of the <a href="https://desktop.github.com/">GitHub Desktop for Windows</a>). This is a port of the mature MSYS / MinGW port of Linux build environments and works pretty well, though some of the commands are old versions.</p>
<p>On Windows, npm ignores the current shell from which you run it and doesn&#8217;t pass the shell on to the sub processes as you would expect. However, you can easily run bash as the main command in a npm script (it&#8217;s an extra process but that hardly matters). This works as bash sets the path which is then inherited by the cmd subshell in which npm runs your package.json scripts. As a result it&#8217;s easy enough to create portable scripts or convert linux based scripts to also run on Windows. You just need to wrap the command in <pre class="crayon-plain-tag">bash -c "...."</pre> For example, the above env setting script can be recoded as follows</p><pre class="crayon-plain-tag">bash -c"NODE_ENV=production webpack --config client/webpack.config.js"</pre><p>The only issue i found is the need to carefully quote &#8221; characters. For example here&#8217;s a little script to prompt before deploying to GitHub pages (I&#8217;m showing the full package.json entry for clarity)</p><pre class="crayon-plain-tag">"deploy": "bash -c \"read -n1 -p\\\"Have you commited ready to deploy (yY) \\\"; echo; [[ $REPLY = [yY] ]] &amp;&amp; npm run _buildanddeploy || { echo \\\"You didn't answer yes, or deploy failed.\\\"; }",</pre><p></p>
<h1>Using a Linux VM</h1>
<p>I often use a Linux VM as part of my development. With Vagrent it&#8217;s easy to provision a headless VirtualBox (or other) VM that shares the host filespace and exposes a SSH terminal. Thus you can edit using Windows tools like VisualStudio Code yet run everything in the Linux VM. This lets you run local tests in the same VM as a CI or CD system (which will usually be Linux , unless you are using Azure). One easy configuration I&#8217;ve used is this <a href="https://github.com/GPII/qi-development-environments">Quality Infrastructure</a> from the GPII project.</p>
]]></content:encoded>
			<wfw:commentRss>/openingaccessibility/2016/03/more-on-portable-npm-scripts/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Progressive Enhancement &#8211; the web&#8217;s strength</title>
		<link>/openingaccessibility/2015/06/progressive-enhancement/</link>
		<comments>/openingaccessibility/2015/06/progressive-enhancement/#respond</comments>
		<pubDate>Fri, 05 Jun 2015 13:29:02 +0000</pubDate>
		<dc:creator><![CDATA[Steve]]></dc:creator>
				<category><![CDATA[web]]></category>

		<guid isPermaLink="false">/openingaccessibility/?p=570</guid>
		<description><![CDATA[The web is a big beautiful mess and we love it. We&#8217;ve has come a long way from the web&#8217;s origins as hyperlinked text for scientist to share. We&#8217;ve collectively learned a lot about what makes the web so powerful &#8230; <a href="/openingaccessibility/2015/06/progressive-enhancement/">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p>The web is a big beautiful mess and we love it.</p>
<p>We&#8217;ve has come a long way from the web&#8217;s origins as hyperlinked text for scientist to share. We&#8217;ve collectively learned a lot about what makes the web so powerful and how to exploit it in that short time. We&#8217;ve also made mistakes, swinging off course to unhelpful design extremes, only to swing back and subsequently grow in our understanding as a result.</p>
<p>For example we escaped the pixel-perfect positioning print-media pretence phase [alteration apology] and now appear to be in a equally obsessive javascript rules, app-tastic, web as platform, native competitor frenzy. This time it&#8217;s being driven by developers rather than designers. And again the wide inclusive web community will no doubt auto-correct our collective course. The current discussion on the place of Progressive Enhancement (PE) with or without javascript and the what makes the web great, appears to be heralding the start of that process. I hope so.</p>
<div style="width: 550px" class="wp-caption alignnone"><a href="http://alistapart.com/article/understandingprogressiveenhancement"><img class="" src="http://d.alistapart.com/understandingprogressiveenhancement/m-m.jpg" alt="3 layers of an M&amp;M; content, presentation, clientside scripting" width="540" height="250" /></a><p class="wp-caption-text">One view of progressive Enhancement</p></div>
<p>Evidence of the energy in javascript frameworks can be seen in <a href="http://todomvc.com/">ToDoMVC</a> which has assembled some 64 example frameworks/libraries with new ones coming regularly (and remember MV* is not the only pattern in town). As <a href="http://www.allenpike.com/2015/javascript-framework-fatigue/">Allen Pike quipped </a></p>
<blockquote><p>Studies show that a todo list is the most complex JavaScript app you can build before a newer, better framework is invented</p></blockquote>
<p>This situation has led <a href="https://www.youtube.com/watch?v=k9uK1FdEBfY">Christian Heilmann  to say</a></p>
<blockquote><p>Let&#8217;s stop the rat-race and concentrate on building working sturdy solutions</p></blockquote>
<p>Of all those frameworks I wondered how many support Progressive Enhancement as a feature? I&#8217;ve recently explored several of the latest and greatest frameworks for a new project. These included Angular, Backbone, Ember, Meteor, Polymer, React, Riot, WinJS and I found they don&#8217;t. You might argue &#8220;there&#8217;s a clue in the name &#8220;javascript frameworks&#8221;; they will need, well, er, javascript. Good point, but that misses what PE is about. The web page should work in a minimal browser, without CSS and Javascript but work better when the technologies are available. To have a blank page with no javascript is a fail.</p>
<p>In fact, I eventually reminded myself of mature (and so boring) jQueryMobile and jQueryUI which both state PE as a design principle but are not MV* in themselves.  T3js also mentioned PE but I&#8217;ve not explored how much it is supported. I&#8217;m interested to observe that many MV* solutions are not the same as the original Smalltalk MVC which was where I first experienced it. Some like the Flow architecture are much closer with no 2 way binding.</p>
<p>I suspect the reason for this lack of PE is as others have observed, namely with so many developer&#8217;s now coming to front end web dev many bring experiences of good practices from large software systems and naturally want to apply them. I&#8217;m not saying hard won principles such as modularity, separation of concerns, loose coupling and even MVC itself are bad. Rather the narrow focus on the software engineering with Javascipt can means we easily lose sight of strengths of the web and code ourselves into a corner.</p>
<p>I believe we need to remind ourselves to develop for the web, not just the browser. Better, design for users of the web, not browsers. Users are to be found using a range of devices,  a variety of browsers. perhaps with assistive technology and in varied contexts. We can&#8217;t control our users environment, whether its to get a pixel perfect layout or create a javascript platform.</p>
<p>The recent discussion on PE is distilling the concept that the web has it&#8217;s own strengths which derive from it&#8217;s heritage of sharing scientific information. These include hassle-free access by disparate people on varied devices. The web can do this like nothing else can and PE, responsive design and accessibility are key factors in ensuring it delivers on it&#8217;s promise. By supporting a wide inclusive range of devices and user capabilities we gain incredible reach that is of benefit both commercially and individually.</p>
<p>As  <a href="http://www.quirksmode.org/blog/archives/2015/06/web_vs_native_r.html">PPK said</a></p>
<blockquote><p>We’ve lost sight of how to capitalise on that strength, though, and have to find our way back home.</p></blockquote>
<p>I&#8217;m confident we will. My current thoughts are that PE is a key part of what makes the web work best and encompasses both mobile-first responsive design and accessibility. Design for small screens and enhance for larger ones. Design for basic inclusive access and enhance for optimal personalised experience. Taken together and with other techniques that make few assumptions will be able to reap the benefits of the web&#8217;s strength.</p>
<p>Perhaps someone will write  a dissertation to explain this user focussed aspect of the web to sit along side Roy Fielding&#8217;s &#8220;Architectural Styles and the Design of Network-based Software Architectures&#8221;. Any volunteers?</p>
]]></content:encoded>
			<wfw:commentRss>/openingaccessibility/2015/06/progressive-enhancement/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>CKEditor  Accessibility Checker for content authors</title>
		<link>/openingaccessibility/2015/05/ckeditor-accessibility-checker-for-content-authors/</link>
		<comments>/openingaccessibility/2015/05/ckeditor-accessibility-checker-for-content-authors/#comments</comments>
		<pubDate>Thu, 28 May 2015 13:28:56 +0000</pubDate>
		<dc:creator><![CDATA[Steve]]></dc:creator>
				<category><![CDATA[a11y]]></category>
		<category><![CDATA[opensource]]></category>
		<category><![CDATA[web]]></category>
		<category><![CDATA[CMS]]></category>
		<category><![CDATA[drupal]]></category>

		<guid isPermaLink="false">/openingaccessibility/?p=551</guid>
		<description><![CDATA[Here&#8217;s a mini review after a quick play with a preview of the new CKEditor Accessibility Checker plugin for content creators. The plugin is provided by CKSource who lead the development of the open source CKEditor and provide additional commercial grade &#8230; <a href="/openingaccessibility/2015/05/ckeditor-accessibility-checker-for-content-authors/">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p>Here&#8217;s a mini review after a quick play with a preview of the new <a href="http://cksource.com/ckeditor/services#accessibility-checker">CKEditor Accessibility Checker</a> plugin for content creators. The plugin is provided by CKSource who lead the development of the open source <a href="http://ckeditor.com/">CKEditor</a> and provide additional commercial grade services.</p>
<h1>WYSIWYG JavaScript editors</h1>
<p>If your memory is as long as mine you will recall when WYSIWYG javascript editors first appeared back in the days when we spoke excitedly of DHTML (D = Dynamic = scripted). Designed for use in web programs such as Content Management Systems (CMSs, eg Drupal) these editors replace a basic HTML &lt;textarea&gt; with a rich editing experience somewhat similar to using a word processor, including toolbars. They hide the complexities of creating markup by automatically inserting tags into  generated HTML which is then persisted in the CMS and displayed as part of viewed webpages.</p>
<p>Two early editors emerged as leaders, at least when I last looked over 5 years ago; CKEditor and <a href="http://www.tinymce.com/">TinyMCE</a>. Both are still going strong and now have many solid features. While these editors provide a familiar experience when creating rich content, there was a problem. Accessibility. Or rather there were 2 accessibility problems.</p>
<h1>Accessibility woes</h1>
<p>Firstly, the toolbars were initially implemented as bit images and provided no keyboard access. I&#8217;m pleased to say that has now been fixed and in CKEditor for example you hit Alt+F10 to get focus into the toolbars. There are other <a href="http://docs.ckeditor.com/#!/guide/dev_a11y">accessibility features</a> including keyboard shortcuts and even an Accessibility Help screen accessed via Alt+0</p>
<p>The 2nd accessibility issues is harder to solve. It&#8217;s the accessibility of the content created by authors using the editor. While the CMS developers like Drupal may make every effort to ensure the end user experience is fully accessible, they cannot fully control user generated content. As the editor manages which tags are added it can ensure a certain level of accessibility including WAI ARIA but authors can still make common accessibility errors, For example it&#8217;s easy to create a bad structure by skipping heading levels. Or the perennial chestnut forgetting to add an alt attribute to important pictures.</p>
<h1>CKEditor Accessibility Checker</h1>
<p>One solution to the problem of catching author errors is to provide a tool that authors can use to check their content before they submit it. This is the approach taken in the CKEditor Accessibility Checker plugin. While there are several HTML validation tools and services that could be used the quail checker</p>
<p>To try the Accessibility Checker I first played with the <a href="http://cksource.com/ckeditor/services#accessibility-checker">comprehensive sample</a> and then knocked up a little test. The sample provide some Wikipedia style content with 7 errors flagged by the <a href="http://quailjs.org/">Quail accessibility checker</a> used for validating the markup.</p>
<div id="attachment_553" style="width: 990px" class="wp-caption aligncenter"><a href="/openingaccessibility/wp-content/uploads/2015/05/a11yChecker.png"><img class="wp-image-553 size-full" src="/openingaccessibility/wp-content/uploads/2015/05/a11yChecker.png" alt="" width="980" height="620" srcset="/openingaccessibility/wp-content/uploads/2015/05/a11yChecker.png 980w, /openingaccessibility/wp-content/uploads/2015/05/a11yChecker-300x190.png 300w" sizes="(max-width: 980px) 100vw, 980px" /></a><p class="wp-caption-text">CKEditor Accessibility Checker screen shot</p></div>
<p>As can be seen, a dialog popup provides the user interface with button for Next and Prev error, an explanation of the issue which is also highlighted in the content. A triangle on one edge of the dialog also acts as a pointer to the problem.  All-in-all this is a good interactive experience for navigating and fixing issues. In addition, if the editor content is clicked to make a change the dialog shrinks down out of the way &#8211; a nice touch. Quick fixes are provided as extra javascript snippets in the sample code and make for an easy user experience. A complication here is that authors using CKEditor are intentionally insulated from the raw markup details so errors have to make sense with minimal reference to techy details and standards. I think a reasonable job has been done though some understanding of the underlying markup is required.</p>
<p>In order to get an experience of the effort involved in using the Editor and Accessibility Checker I created a simple webpage with some dodgey initial content for the editor. This shows how painless it is. In addition to the CKEditor initialisation and textarea  element replacement code, it is only required to include jQuery and declare use of the Accessibility Checker plug in.</p><pre class="crayon-plain-tag">&lt;!doctype html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="utf-8"&gt;
  &lt;title&gt;CKEditor with a11yChecker&lt;/title&gt;
  &lt;meta name="description" content="CKEditor with a11yChecker "&gt;
  &lt;meta name="author" content="Steve Lee"&gt;
  &lt;script src="js/ckeditor/ckeditor.js"&gt;&lt;/script&gt;
  &lt;script src="js/jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;main&gt;
    &lt;form&gt;
      &lt;textarea name="editor1" id="editor1" rows="10" cols="80"&gt;
            &lt;h2&gt;H2 Heading&lt;/h2&gt;
            &lt;h4&gt;H4 naughty as skipped h3&lt;/h4&gt;
            &lt;p&gt;No alt attribute on this &lt;img src='img/noalt.jpg' /&gt;&lt;/p&gt;
            &lt;table&gt;&lt;tr&gt;&lt;td&gt;whoops no th&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
            &lt;p&gt;&lt;span style="background-color:darkgray; color:gray"&gt;Can you read this?&lt;/span&gt;&lt;/p&gt;
        &lt;/textarea&gt;
        &lt;script&gt;
          CKEDITOR.replace( 'editor1', 
                              {extraPlugins: 'a11ychecker'}
                              );
        &lt;/script&gt;
    &lt;/form&gt;
  &lt;/main&gt;
&lt;/body&gt;
&lt;/html&gt;</pre><p>Note that the checker makes an XHR call to Quail so the sample had to run from a server, not file:///.  An easy way to do that is with nodejs and hapi configured as a simple static server. I also used the new <a href="https://code.visualstudio.com/">Visual Studio code</a> editor to edit and run it. All in all that&#8217;s a nice easy and portable way to get a nodejs server up and running</p><pre class="crayon-plain-tag">var Hapi = require('hapi');

// Create a server with a host and port
var server = new Hapi.Server();
server.connection({ 
    host: 'localhost', 
    port: 3000 
});

// Add a route for a simple static file server
server.route({
    method: 'GET',
    path: '/{param*}',
    handler: {
        directory: {
            path: 'public',
            index: true
        }
    }
});

server.start();</pre><p>While the first three accessibility errors in my dodgy markup were found the contrast fail was not, even though this is listed in the Quail documentation. I checked with <a href="http://www.paciellogroup.com/resources/wat/">TPG&#8217;s WAT</a> to ensure it was indeed a WCAG AA and AAA fail. I tried adding it as a new CKeditor style but that made no difference. Perhaps Quail does not map the colour names to values? I assume it works with inline styles. I didn&#8217;t spend anymore time investigating this.</p>
<p>Some errors are no doubt hard to find as the editor contents are one part in a larger page context. If the wider page context is ignored then some structural errors will not be found. The edit page context is likely to be different to the view one.  Also, if the same content is used in several page contexts the structural integrity may vary.</p>
<h1>Final Thoughts</h1>
<p>The Accessibility Checker plugin is a good solution for ensuring user supplied content is accessible or otherwise checking in browser edited markup. The UX is good, though I did not check the accessibility of the UX itself. Quail is a good open source accessibility validator, is configurable and supports <a href="http://quailjs.org/#/guidelines">test for both WCAG and Section 508</a>. The Accessibility Checker documentation claims it can be used with others checkers so perhaps it would work with Tenon.io, though that requires a subscription. The Quick fix feature make it even easier for authors to use</p>
<p>Currently Accessibility Checker is a commercial offering from CKSource but they said they plan to make it open source under GPL, like CKEditor itself.  I see there is a Drupal plugin for using CKEditor so no doubt the Accessibility checker could be added as well, making Drupal even more accessible.</p>
]]></content:encoded>
			<wfw:commentRss>/openingaccessibility/2015/05/ckeditor-accessibility-checker-for-content-authors/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>I&#8217;m liking Microsoft again</title>
		<link>/openingaccessibility/2015/05/im-liking-microsoft-again/</link>
		<comments>/openingaccessibility/2015/05/im-liking-microsoft-again/#respond</comments>
		<pubDate>Mon, 04 May 2015 13:07:58 +0000</pubDate>
		<dc:creator><![CDATA[Steve]]></dc:creator>
				<category><![CDATA[a11y]]></category>
		<category><![CDATA[web]]></category>
		<category><![CDATA[Windows]]></category>

		<guid isPermaLink="false">/openingaccessibility/?p=518</guid>
		<description><![CDATA[After watching the key notes and selected sessions from Microsoft #Build2015 over on Channel 9 I&#8217;m definitely liking Microsoft again. This new found affection is form largely from the perspective of a HTML developer and to some extent as an &#8230; <a href="/openingaccessibility/2015/05/im-liking-microsoft-again/">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p>After watching the key notes and selected sessions from <a href="http://channel9.msdn.com/Events/Build/2015">Microsoft #Build2015 over on Channel 9</a> I&#8217;m definitely liking Microsoft again. This new found affection is form largely from the perspective of a HTML developer and to some extent as an accessibility practitioner. To be honest this is a welcome pleasant surprise.</p>
<p><img class="alignnone" src="https://tse1.mm.bing.net/th?&amp;id=JN.EDqULxX2GYmt%2bs%2be97A0pg&amp;w=300&amp;h=300&amp;c=0&amp;pid=1.9&amp;rs=0&amp;p=0" alt="OSI logo with WIndows Logo superimposed on it." width="260" height="180" /><img class="alignnone" src="https://pbs.twimg.com/profile_images/438453169706635264/2qK0GYg6_400x400.png" alt="Microsoft Enable logo" width="195" height="195" /></p>
<p><img class="alignnone" src="http://i.telegraph.co.uk/multimedia/archive/03286/microsoftedge_3286133b.jpg" alt="Microsoft Edge browser logo" width="264" height="165" /><img class="alignnone" src="http://www.wp7.nl/wp-content/uploads/2013/07/visual_studio_tile.png" alt="Visual Studio logo" width="184" height="184" /></p>
<p>When I Started Windows 3.0 development back in the day (and with liberal help from Charles&#8217; Petzold&#8217;s excellent book), I soon figured Microsoft treated developers well, even courting them with shiny tech to explore and great communications (like MSDN magazine and then later with huge stacks of CDs).</p>
<p>This was the early phase of Microsoft corporate culture when they were still very much developer led. Admittedly, some of their products&#8217; usability suffered from this bias and quite rightly they changed structure. Later, I moved on from embedded development using MASM, and MS Visual C for PC deployments an eventually to MS Windows powered financial products. As a result of tweaking the UK SKU of MS Money I even managed to work for Microsoft on some MSN back end code as a &#8216;contractor&#8217; in Red West B, but that&#8217;s another story.</p>
<p>I started to focus on the intersection of web accessibility, where Microsoft had a limited user story, and open source, where they were largely seen as the face of the proprietary corporate enemy. That view was not helped by <a href="http://en.wikipedia.org/wiki/Open_Letter_to_Hobbyists">Bill Gates&#8217; famous open letter to hobbyists</a> which wound a lot of people up at the time and later. Boy have things changed!</p>
<p>Even though I really enjoyed working on Linux and the excellent accessibility features of Gnome 2 and Mozilla Firefox, I must admit I did keep using and developing on/for Windows. I created a number of small Windows based Assistive Technologies, including the popular <a href="http://fullmeasure.co.uk/powertalk/">PowerTalk</a> that automatically narrates PowerPoint presentations as you operate them. Powertalk uses Python to access the Office Object Model and drive SAPI speech syntheses. By the way, SAPI is one of many excellent technologies with powerful accessibility uses from the Microsoft Research stable. Another is Kinect.</p>
<p>Microsoft then entered what I see as the dark Balmer years and I largely moved away as user or developer. Even though my then business partner and strong Open Source community leader, Ross Gardler, was strongly not anti Microsoft. Actually, I eventual found out why Ross held that view as he left to joined <a href="https://msopentech.com/">Microsoft Open Tech</a>. At one point we did look at Windows 8 HTML hybrid development (WinJS + perhaps Cordova) but in those early times we hit issues that I could not easily figure out from the historically excellent MSDN documentation. Mind you, I had not yet found <a href="http://blogs.msdn.com/b/microsoft_press/archive/2014/04/08/free-ebook-programming-windows-store-apps-with-html-css-and-javascript-second-edition.aspx">Kraig Brochshmidt&#8217;s excellent free ebook</a> &#8211; a &#8220;must read&#8221; for any HTML development on Windows.</p>
<p>I must admit that at the time I felt that the move to Microsoft was going to be important for both Ross and Microsoft. After my experience from Build2015 I feel that&#8217;s reasonably well validated. Here&#8217;s why</p>
<ul>
<li>The clear overall impression from Build was that Microsoft have now adjusted their culture so they now <strong>embrace and engage</strong> open source communities. Those of you aware of  the more popular old criticisms of Microsoft will  know why I highlighted that :). In the process Microsoft have rediscovered a friendship with developers.  The dual C words of Community and Conversation seem to have almost become mantras, at least in the session I watched. Sure,they are doing this for business survival reasons, but it still rocks.</li>
<li>New developer tooling, including the excellent new <a href="https://code.visualstudio.com//">Visual Studio Code</a>, show energy in supporting popular open source tools and workflows used by those outside of the Microsoft way. This is especially true in the web and HTML app space as I saw demos of nodejs, Bower, Gulp, Cordova, Angular, backbone and more. Plus Microsoft&#8217;s own  <a href="https://dev.windows.com/en-us/develop/winjs">WinJS framework</a> works with Angular and other frameworks. And, oh did I, <strong>really</strong> see those Angular devs in a Build presentation!?</li>
<li><a href="http://www.microsoft.com/en-us/windows/browser-for-doing">Edge</a> is so obviously the new browser on the block from a standards point of view. If you recall why Mozilla Firefox was started you realise that is a most welcome result. We&#8217;ve recently been seeing Microsoft engage with W3C and other groups to great effect. Even if sometimes they want to push things in different directions to others, for example ORTC rather than webRTC, they are taking an active part, unlike some others whom I won&#8217;t mention. Also the the F12 tooling has some great innovative features, including the ability to attach to embedded webviews. This &#8216;joining in&#8217; even includes key bindings &#8211; as I honestly heard the presenter saying &#8220;why be different to others for no good reason?&#8221;.</li>
<li>The new developer paths to and from Android and iOS are also impressive. As is the support of hosted apps and win32 apps in the appstore. Microsoft are obviously keen to get everyone on their Windows/Azure platforms.</li>
</ul>
<p>The other reason I find I&#8217;m liking Microsoft again is their approach to supporting the plethora of devices, form factors and input modes that we now face. Universal Apps, the flexible input platform and Continuum act together to provide the basics for a smooth cross platform (device) and accessible experience for users.</p>
<p>For example plugging a keyboard into my Android ASUS transformer tablet just didn&#8217;t work well enough so I gave up. Windows controls support mouse, touch, keyboard and even pen and games controller. With Continuum you can plug a mouse, keyboard and HDMI monitor into a suitable phone and get a near desktop experience.</p>
<p>The flip side of this flexibility is a boost in accessibility. The previously mentioned paths between other developer platforms, including their own, strengthen this considerably. My strong impression is that Microsoft have the best, if not unique, story here and it will only get better.</p>
<p>Definitely not your mom&#8217;s Microsoft. I&#8217;m looking forward to watching this unfold&#8230;</p>
]]></content:encoded>
			<wfw:commentRss>/openingaccessibility/2015/05/im-liking-microsoft-again/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Sending emails with PHP on cheap hosting</title>
		<link>/openingaccessibility/2013/12/sending-emails-with-php-on-cheap-hosting/</link>
		<comments>/openingaccessibility/2013/12/sending-emails-with-php-on-cheap-hosting/#respond</comments>
		<pubDate>Mon, 09 Dec 2013 10:56:35 +0000</pubDate>
		<dc:creator><![CDATA[Steve]]></dc:creator>
				<category><![CDATA[development]]></category>
		<category><![CDATA[opensource]]></category>
		<category><![CDATA[PHP]]></category>
		<category><![CDATA[web]]></category>
		<category><![CDATA[WordPress]]></category>

		<guid isPermaLink="false">/openingaccessibility/?p=318</guid>
		<description><![CDATA[Many cheap or free share hosting services block the PHP mail() function so it silently does nothing. For example, I just added a contact form to a small WordPress based web site for a friend but it didn&#8217;t work as &#8230; <a href="/openingaccessibility/2013/12/sending-emails-with-php-on-cheap-hosting/">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p>Many cheap or free share hosting services block the PHP mail() function so it silently does nothing. For example, I just added a contact form to a small <a href="http://wordpress.org/">WordPress</a> based <a href="http://davidburchfieldpoetry.com/">web site</a> for a friend but it didn&#8217;t work as the web hoster, xtreemhost, block it (or everything gets heavily spam filtered, which amounts to the same thing).</p>
<p>The solution is to use a separate SMTP mail server and this is actually quite simple using one of the most popular PHP mail solutions <a href="https://github.com/PHPMailer/PHPMailer">PHPMailer</a> and a Gmail or Google Apps email account. Most SMTP servers will block such so called &#8220;relaying&#8221; when sending from different domain to the mail server. However, if you have a GMail account you can use the Google SMTP server authenticated as that user.</p>
<p>In my case, I just added a new account to our family domain running on GApps and used that. I added the minimum PHPMailer files required (<a id="ace81e501931d8763b49f2410cf3094d-2f6831a81eeafba4b38f3bb4959db412d948c546" title="class.phpmailer.php" href="https://github.com/PHPMailer/PHPMailer/blob/master/class.phpmailer.php">class.phpmailer.php</a>, <a id="ac5c95a7c256b389656048bd46dc2985-6366724a761f25e8b601b45f39460fc54707c3bc" title="class.smtp.php" href="https://github.com/PHPMailer/PHPMailer/blob/master/class.smtp.php">class.smtp.php</a> and <a id="5114544afadc9af298ba54a73467bf22-be0dad2537abf6688545a56f77e84b89ea0ca904" title="PHPMailerAutoload.php" href="https://github.com/PHPMailer/PHPMailer/blob/master/PHPMailerAutoload.php">PHPMailerAutoload.php</a>) along with a child theme with my new mail() function in the functions.php file. Well, actually, I found the PHP override/replace functions for built-ins didn&#8217;t work so I had to edit the plugin code to use a new mail function explicitly, rather than just redefining it in the child theme. Not ideal, but an acceptable maintenance weak point.</p>
<p>The PHPMailer examples include one for <a href="https://github.com/PHPMailer/PHPMailer/blob/master/examples/gmail.phps">using GMail SMTP</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/openingaccessibility/2013/12/sending-emails-with-php-on-cheap-hosting/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>HTML apps and the 50 year software engineering legecy</title>
		<link>/openingaccessibility/2013/08/html-apps-and-the-50-year-software-engineering-legecy/</link>
		<comments>/openingaccessibility/2013/08/html-apps-and-the-50-year-software-engineering-legecy/#respond</comments>
		<pubDate>Thu, 22 Aug 2013 15:38:02 +0000</pubDate>
		<dc:creator><![CDATA[Steve]]></dc:creator>
				<category><![CDATA[development]]></category>
		<category><![CDATA[HTML]]></category>
		<category><![CDATA[opensource]]></category>
		<category><![CDATA[web]]></category>

		<guid isPermaLink="false">/openingaccessibility/?p=216</guid>
		<description><![CDATA[I no longer call myself a &#8216;software engineer&#8216; but I do consider it to be a vital part of my career background. To my mind, engineering provides the rigour and discipline aspects of being a developer, the other parts being &#8230; <a href="/openingaccessibility/2013/08/html-apps-and-the-50-year-software-engineering-legecy/">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p>I no longer call myself a <a href="http://en.wikipedia.org/wiki/Software_engineer">&#8216;software engineer</a>&#8216; but I do consider it to be a vital part of my career background. To my mind, engineering provides the rigour and discipline aspects of being a developer, the other parts being the craftmanship of software and community social interactions with other members of a project/product team.</p>
<p>To be fair I&#8217;ve been a round a while; from my first early tentative hacks of 6800 assembler listings of a BASIC interpreter, through commercial development of mission critical mobile data systems, to open development of accessibility and HTML apps. Along the way I&#8217;ve picked up a number of  good practices as projects got larger and more complex. Some I rapidly unlearned (eg Waterfall &amp; V models, Yourdon, Jackson), others have stood the test of time (eg modular encapsulation, OOD, unit testing) and new ones have come along (eg Open Development, Agile methods, TDD, Human centred design). These great thing is these all apply regardless of technology used.</p>
<div id="attachment_220" style="width: 241px" class="wp-caption aligncenter"><a href="/openingaccessibility/wp-content/uploads/2013/08/462px-Detailed_DoD_Technical_Reference_Model.jpg"><img class="size-medium wp-image-220 " alt="My Big App" src="/openingaccessibility/wp-content/uploads/2013/08/462px-Detailed_DoD_Technical_Reference_Model-231x300.jpg" width="231" height="300" srcset="/openingaccessibility/wp-content/uploads/2013/08/462px-Detailed_DoD_Technical_Reference_Model-231x300.jpg 231w, /openingaccessibility/wp-content/uploads/2013/08/462px-Detailed_DoD_Technical_Reference_Model.jpg 462w" sizes="(max-width: 231px) 100vw, 231px" /></a><p class="wp-caption-text">My Big App</p></div>
<p>So it was interesting to suddenly notice a year or so back that at conferences like the <a href="http://events.jquery.org/2012/uk/">first jQueryUK</a> conference how HTML developers are starting to wrestle with some of the problems already experienced by previous software developers. The issues are arising as we attempt to build apps in HTML technologies, layering javascript heavy designs on top of the declarative basics of HTML and CSS.  The issues are those that occur when you move to development-in-the large. For example, the need for modules, and namespaces, relying on the scaffolding of 3rd party libraries or frameworks, cross platform (browser) support and handling the social aspects of working in teams or open projects.</p>
<p>I guess it&#8217;s a new generation coming along and many grew up on the cut-n-paste hackiness of the early web. Now the problems have got bigger and more serious so the approach needs to change. To solve this, a number of libraries/frameworks have become the first port of call for developers trying to make life easier on complex HTML apps. Some of  these plug serious gaps in the language such as the lack of modules required for design in-the-large (I&#8217;ll deliberately not mention class based OOD here). Others provide abstraction and encapsulation of the messiness of the web, but these often work in almost purely programmatic ways, ignoring and replacing the strengths and principles of declarative HTML.</p>
<p>Some large monolithic libraries pull in masses of code even if not needed, this having a bad affect on load performance sensitive usages, such as mobile. For example jQuery (and jQueryMobile) undoubtedly make a developer&#8217;s life simpler in many ways, but are monolithic. Now, however the original purpose it served, namely using CSS declarative syntax for DOM element selection, is now available natively in browsers with <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element.querySelectorAll">element.querySelectorAll()</a>. Plus native can be faster at run time and without the loading overhead. Another example is how the javascript code for forms handling, especially validation, is often not necessary due to HTML5 improvements.</p>
<p>John Allsopp neatly picks up on this topic in his recent post recent post &#8216;<a href="http://www.sitepoint.com/is-html-relevant-in-the-age-of-web-apps/">Is HTML Relevant in the Age of Web Apps?</a>&#8216;, neatly highlighting the impact of sucking in all this code complexity.</p>
<blockquote><p>As the systems we build increasingly replace traditional enterprise, client server, desktop and mobile apps (yes it <em>will</em> happen), this luxury of building disposable code, with no real concern for the tower of complexity our code rests upon, will pass.</p>
<p>It’s time for us to grow up, and start learning from the more than 50 year legacy of software engineering.</p>
<p>Because, as with all history, if we don’t learn from it, we are doomed to repeat it</p></blockquote>
<p>So how can best learn the required good techniques? &#8220;<a href="http://java.dzone.com/articles/4-things-i-wish-i-would-have">4 Things I Wish I Would Have Known When I Started My Software Development Career</a>&#8221; by John Sonmez, the <a href="http://simpleprogrammer.com/">Simple Programmer</a> outlines 4 mistakes I&#8217;ve made myself in my career (and for some still have a tendency to do).</p>
<blockquote>
<ul>
<li>There is no “right way” in software development</li>
<li>Reading a book cover-to-cover is not the best way to learn</li>
<li>Learning particular technologies in-depth is a waste of time</li>
<li>Always have a side project</li>
</ul>
<p><i> </i></p></blockquote>
<p><span style="line-height: normal;">Actua</span><img class="alignleft" style="font-size: 12px; line-height: 18px;" title="Code Complete 2" alt="CC2e" src="http://cc2e.com/_img/cc2e-cover-small.gif" width="162" height="198" /><span style="line-height: normal;">lly, o</span><span style="line-height: normal;">ne book that it probably </span><strong style="line-height: normal;">is</strong><span style="line-height: normal;"> worth reading cover-to-cover is Steve McConnell&#8217;s labour of love &#8216;</span><a style="line-height: normal;" href="http://cc2e.com/Default.aspx">Co</a><a style="line-height: normal;" href="http://cc2e.com/Default.aspx">de Complete: A Practical Handbook of Software Construction</a>&#8216;<span style="line-height: normal;">. I must admit I&#8217;ve only deep-skim-read it but it&#8217;s full of <a href="http://cc2e.com/Page.aspx?nid=71">perfect gems of software construction</a> mined from the coalface and lovingly presented for your delight. I have a scruffy old copy of the 1st version but Steve has updated it and I expect it&#8217;s even better. Not at all bad for a book that only cost&#8217;s <a href="http://www.amazon.co.uk/gp/product/0735619670/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=1634&amp;creative=6738&amp;creativeASIN=0735619670&amp;linkCode=as2&amp;tag=opendirective-21">£24.48 at Amazon.co.uk </a></span></p>
<p>&nbsp;</p>
<p>Use Code Complete for a side project with an open source project that practices community driven open development, and you&#8217;ll soon be on your way to learning from that legacy.</p>
<p>Engineer on.</p>
]]></content:encoded>
			<wfw:commentRss>/openingaccessibility/2013/08/html-apps-and-the-50-year-software-engineering-legecy/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Developing programs designed for AT users</title>
		<link>/openingaccessibility/2013/01/developing-programs-for-at-users-and-that-run-on-multiple-platforms/</link>
		<comments>/openingaccessibility/2013/01/developing-programs-for-at-users-and-that-run-on-multiple-platforms/#respond</comments>
		<pubDate>Wed, 30 Jan 2013 18:23:22 +0000</pubDate>
		<dc:creator><![CDATA[Steve]]></dc:creator>
				<category><![CDATA[a11y]]></category>
		<category><![CDATA[opena11y]]></category>
		<category><![CDATA[opensource]]></category>
		<category><![CDATA[web]]></category>

		<guid isPermaLink="false">/openingaccessibility/?p=68</guid>
		<description><![CDATA[It can be a challenging enough to develop programs (and apps) that provide a first class user experience for users of Assistive Technology (AT) such as screen readers. There are plenty of examples of programs &#8216;out there&#8217; with varying degrees &#8230; <a href="/openingaccessibility/2013/01/developing-programs-for-at-users-and-that-run-on-multiple-platforms/">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p>It can be a challenging enough to develop programs (and apps) that provide a first class user experience for users of Assistive Technology (AT) such as screen readers. There are plenty of examples of programs &#8216;out there&#8217; with varying degrees of broken accessibility when used with AT. Certainly enough to demonstrate that good accessibility is not a given and requires effort. So if you want to design specifically for users of AT you can expect a good challenge indeed.</p>
<p>If you add the requirement to support a range of platforms then the challenge gets even more interesting . There appears to be little information &#8216;out there&#8217; to guide developers in the best approaches and tools available for AT friendly cross platform solutions.  In this post I explore the underlying issues.  In a later post I&#8217;ll present some of the available solutions. While I concentrate on the technical aspects,  I do hope it is obvious that good UX design for AT users is of paramount importance.</p>
<p>In general there are 2 key aspects of accessibility and programs designed specifically for AT users; the accessibility of the format of  the primary information or documents and the accessibility of the User Interface (UI). Developers want to use a toolkit that enables them to ensure great interaction with both by AT users but are often not sure how to approach it.</p>
<p>Thoughts about developing such AT targeted programs led Prateek Tandon of <a href="http://projectpossibility.org/">ProjectPossibility</a> to ask us this question:</p>
<blockquote><p>is there a particularly good language / toolset / framework to build out-of-box working applications that will work on the major desktop platforms with popular screen readers such as NVDA, JAWS, and VoiceOver?</p></blockquote>
<p>The answer to that is &#8220;it&#8217;s complicated&#8221;, especially when I generalise it to &#8220;will work with AT&#8221;  Each platform, whether desktop or mobile has development tools which will mostly create accessible application UIs, <strong>if</strong> you pay attention to detail and perform proper testing. In addition, there are several tools available for creating cross platform native  solutions,. Many of these are mature opensource projects, including those for C++, Java and Python. In addition HTML apps and widgets are fast becoming a viable alternative, though not without some complications as we&#8217;ll explore below. The requirement for 1st class AT integration adds another dimension of complexity. The ATs on each platform are different (with the notable exception of OS X and iOS, and the Win8 versions). Plus the critical Accessibility APIs that provide the glue between the apps and AT are also different.  These accessibility APIs enable AT users to explore and manipulate the application UI and be made aware of status changes or other events.</p>
<p>Considering screen readers, for example: on Windows there is NVDA and JAWs using MSAA, UIA and IAccessible2 APIs, on Linux we have Orca using AT/SPI, on OS X and iOS there is VoiceOver and on Android it&#8217;s EyesFree.  This complexity makes it much harder to create apps that work as desired on all platforms, especially if, as a developer, you make life hard for yourself by creating your own custom controls. It&#8217;s so much better to use standard native controls provided by the OS (buttons, lists etc) as they have accessibility baked in. The next preferable choice is to use toolkits with custom controls that have well developed and tested accessibility and AT support. Developing custom controls from scratch requires you to implement <strong>all</strong> the accessibility yourself, not an easy task to get right given the variations and edge cases to be considered.</p>
<p>As an example of this complexity Java Swing is popular for UI development of Java programmes. However, it has a least one short-coming for AT users, namely the need to perform a fiddly manual install of an extra package for AT access on Windows (Java Access Bridge). Of course an excellent solution to this specific problem would be for the open a11y community to improve the Java Access Bridge so the problem goes away. This would also be of benefit to users of the Windows Screen reader NVDA who want to access OpenOffice. For OpenOffice users, however, another solution is looking feasible as the community are looking at porting IBM&#8217;s work on supporting the <a href="http://www.linuxfoundation.org/collaborate/workgroups/accessibility/iaccessible2">IAccessibile2</a> open standard from Symphony to Apache OpenOffice).</p>
<p>HTML applications are rapidly becoming popular with developers, and look set to become the preferred technology for creating cost effective, portable and maintainable programs or apps. A key advantage is that the browser becomes a virtual platform that is (at least in theory) the same on any platform using any browser. This requires the standards to be followed carefully by the browser developers. The <a href="http://www.w3.org/">W3C standards</a> are becoming richer and active community input is helping with speed and requirements. Browsers are now multilaterally implementing the standards more accurately and Javascript performance is no longer an issue. Critically, Javascript APIs providing access to platform capabilities are being specified and implemented. Thus full featured HTML applications to match native version are now being created.</p>
<p>However when we consider <a href="http://www.w3.org/WAI/">HTML app accessibility</a> and integration with AT there is a more complex picture. This is due to the deeper stack of software parts compared with native apps. All the parts have to work together to ensure AT can fully access and present the HTML app&#8217;s UI. The web browser itself must implement the platform Accessibility API and cleanly map HTML accessibility through it to the AT. It does this for both it&#8217;s own chrome and the HTML content being handled. The HTML apps must be carefully developed to use accessibility best practices, especially those that effect AT. In particular good markup must be used and <a href="http://www.w3.org/WAI/intro/aria.php">WAI ARIA</a> adds important extra detail necessary for accessible applications, especially for events and updates.</p>
<p>Again you can make life easier for yourself by sticking to the HTML defined controls or using HTML frameworks with built-in accessibility. Open frameworks such as jQuery and Dojo have had contributions from <a href="http://paciellogroup.com/">TPG</a>, Mozilla and others who care about accessibility. Other frameworks others like <a href="http://wiki.fluidproject.org/display/fluid/Fluid+accessibility">fluid</a> have had accessibility baked in. In addition, when addressing general platform portability issues, tools like Apache Cordova/PhoneGap and jQueryMobile  provide mature open source solutions with reasonable accessibility.</p>
<p>The accessibility of touch screen devices is adding more challenges, and also the potential for innovation in UX for AT users. This is being spearheaded by work on mobile devices (though touch is also now becoming a built in option for laptop and desktop devices as the boundaries blur eg keyboard with a tablet or Windows 8).  For example the ways <a href="http://www.digitaltrends.com/mobile/android-and-ios-accessibility-can-help-everybody/">blind users can access touch screens</a> is improving through the integrated provision of solutions like VoiceOver, talkBack, kickBack and others. The solutions for others such as those with physical or cognitive advisabilities are still a way behind. This is fertile ground for research and new solutions.</p>
<p>We have outlined the issues involved when  creating applications designed to be used via AT and that run on several platforms. In a future post we&#8217;ll explore the options available in more detail, <strong>but I need your input</strong>. If you have any experience of developing programs with AT users in mind pop your thoughts and experience in the comments and I&#8217;ll compile them for the next post.</p>
]]></content:encoded>
			<wfw:commentRss>/openingaccessibility/2013/01/developing-programs-for-at-users-and-that-run-on-multiple-platforms/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
